<<< MODULE OVERVIEW >>>
( 1 ) What are scales, and why do we need them?
( 2 ) Basic syntax for scales in D3
( 3 ) Introduction to linear scales for continuous data

    - Scales are functions that map from an input domain to an output range.
    - For example, if you were creating a bar graph representing the height of buildings as rectangles, the height values would be generated by our scale, rather than being pre-computed.
> LINEAR SCALE Syntax:
        -- var y = d3.scaleLinear()
            .domain([0, 828])
            .range([0, 4000]);

        console.log(y(100)); --> 48.3
        console.log(y(414)); --> 200
        console.log(y(700)); --> 338.2

        console.log(y.invert(48.3)); --> 100
        console.log(y.invert(200)); --> 414
        console.log(y.invert(338.2)); --> 700

> LOG SCALES are almost syntactically the same as Linear scales except for the addition of the optional method ".base()"
        -- var x = d3.scaleLog()
            .domain([300, 150000])
            .range([0, 400])
            .base(10);

        console.log(x(500)); --> 32.9
        console.log(x(5000)); --> 181.1
        console.log(x(50000)); --> 329.3

        console.log(x.invert(32.9)); --> 500
        console.log(x.invert(181.1)); --> 5000
        console.log(x.invert(329.3)); --> 50000

<<< MODULE OVERVIEW >>>
( 1 ) Learning the syntax for TIME SCALES - a special type of LINEAR SCALE
( 2 ) TIME SCALES take JavaScript date objects in their domain
        -- var x = d3.scaleTime()
            .domain([new Date(2000, 0, 1),
                new Date(2001, 0, 1)])
            .range([0, 400]);

        console.log(x(new Date(2000, 7, 1))); --> 199
        console.log(x(new Date(2000, 2, 1))); --> 66.5
        console.log(x(new Date(2000, 10, 25))); --> 360

        console.log(x.invert(199)); --> Jul 01 2000
        console.log(x.invert(66.5)); --> Wed Mar 01 2000
        console.log(x.invert(360)); --> Sun Nov 25 2000

<<< MODULE OVERVIEW >>>
( 1 ) Ordinal SCALES for assigning color schemes to categorical data
( 2 ) Using D3's hand built-in color schemes in your visualizations
    -- d3.scaleOrdinal()
    -- No Example for Ordinal Scales

<<< MODULE OVERVIEW >>>
( 1 ) BAND SCALES are primarily used for BAR CHARTS
( 2 ) Used to space out rectangles ( Padding Inner, Padding Outer )
( 3 ) Discrete Domain, Continuous Range
    - Syntax: d3.scaleBand()
              .domain()
              .range()
              .paddingInner()
              .paddingOuter();

              console.log(x.bandwidth());

<<< MODULE OVERVIEW >>>
( 1 ) Setting the domains of our scales automatically based on that data that we're looking at
( 2 ) Learning the syntax for D3 min, max, and extent
( 3 ) Using map functions to provide an array of category names for ordinal / band scales
    -- EXAMPLE:
        var data = [
            { grade: "A", value: 4 },
            { grade: "B", value: 3 },
            { grade: "C", value: 2 }
         ]

         var min = d3.min(data, function(d) {
             return d.value;
         })

         console.log(min); --> 2

         var max = d3.max(data, function(d) {
             return d.value;
         })

         console.log(max); --> 4

         var val_extent = d3.extent(data, function(d) {
             return d.value;
         })

         console.log(val_extent); --> [2, 4]

         var grade_map = data.map(function(d) {
             return d.grade;
         })

         console.log(grade_map); --> [ "A", "B", "C" ]

********************************

        var y = d3.scaleLinear()
            .domain([
                d3.min(data, function(d){ return d.value; }),
                d3.max(data, function(d){ return d.value; })
             ]) --> returns [ 2, 4 ]
             .range([ 0, 400 ])

        var y = d3.scaleLinear()
            .domain([d3.extent(data, function(d){ return d.value })]) --> return [ 2, 4 ]
            .range([ 0, 400 ])

        var x = d3.scaleBand()
            .domain(data.map(function(d){ return d.grade; })) --> returns [ "A", "B", "C" ]
            .range([ 0, 400 ])
            .paddingInner( 0.3 )
            .paddingOuter( 0.3 );

<<< MODULE OVERVIEW >>>
( 1 ) Introduction to SVG groups, to structure elements together on the page
    - Groups are invisible containers for structuring SVGs
    - Have translation attributes for moving multiple SVGs at once.

<<< MODULE OVERVIEW >>>
( 2 ) Using transformations to alter SVG's position
( 3 ) Following the D3 margin convention to give us a space to put our axes

    > Structure Example:
        -- <svg>
                <g transform="translate(200, 0)">
                    <rect></rect>
                    <rect></rect>
                    <rect></rect>
                </g>
           </svg>

<<< MODULE OVERVIEW >>>
( 1 ) Using D3 axis generators in our bar chart to show the scale of our chart
( 2 ) Adding axis labels to tell us what we're looking for

    d3.axisTop(*X-SCALE*);
    d3.axisBottom(*X-SCALE*);
    d3.axisLeft(*Y-SCALE*);
    d3.axisRight(*Y-SCALE*);
        *** USED WITH ***
            .tickSize(*VALUE*)
            .tickSizeInner(*VALUE*)
            .tickSizeOuter(*VALUE*)

    > HOW MANY ?
        -- d3.axisBottom(x)
                .ticks(10);

    > TEXT FORMAT
        -- // Floating Point Number
          // No Decimal Points
          d3.axisBottom(x)
                .tickFormat(d3.format(",.0f"));
          // Custom Formatting
                d3.axisBottom(x)
                    .tickFormat(function(d) {
                        return *TICK TEXT*
                    });

    > EXPLICIT VALUES
        -- d3.axisBottom(x)
                .tickValues([1, 2, 3, 5, 8, 13, 21])
